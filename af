#!/bin/sh
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Author: Jakub Filak <jfilak@redhat.com>
# Date: 2016-11-12
#
# Install files from the container's /exports/hostfs to the host

set -o errexit
set -o nounset
set -o pipefail

AF_DB_DIR=/var/lib/af

show_usage()
{
        cat <<EOF
Usage:
    $0 install [--rpm] [DOCKER_CONTAINER]

    $0 uninstall [DOCKER_CONTAINER]

    $0 list [--container] [DOCKER_CONTAINER]

    $0 query [FILE]
EOF
}

show_help()
{
    show_usage
    cat <<EOF

List of commands:
    install               install a container's files to the host
        --rpm             install the files as an rpm package

    uninstall             remove a container's files from the host

    list                  list all files delivered by a container
        --container       list the files from the container

    query                 search for owner of a file

    help                  show help
EOF
}

docker_container_image_tag()
{
    local DockerImage=$(docker inspect --format='{{.Config.Image}}' ${1})
    docker inspect --format="{{index .RepoTags 0}}" $DockerImage
}

build_name()
{
    echo C_${1}___$(docker_container_image_tag ${1} | sed 's/\(.*\)\/\(.*\):\(.*\)/\1-\2/')
}

build_version()
{
    docker_container_image_tag ${1} | sed 's/\(.*\)\/\(.*\):\(.*\)/\3/'
}

build_name_rpm()
{
    echo ${1}-${2}-0.noarch
}

build_exports_path()
{
    local DockerId=$(docker inspect --format='{{.GraphDriver.Data.DeviceName}}' $1)
    local MntTarget=$(findmnt -n -r -o TARGET -S /dev/mapper/${DockerId} | grep -v -e "^\/$" -e "rootfs")
    if [ -z "$MntTarget" ]; then
        mkdir -p /mnt/${1}
        mount /dev/mapper/${DockerId} /mnt/$1
        MntTarget=/mnt/${1}
    fi

    echo $MntTarget/rootfs/exports
}

build_db_name()
{
    echo $AF_DB_DIR/db/$1
}

build_index_name()
{
    echo $AF_DB_DIR/index/$1
}

create_af_db()
{
    local DBName=$(build_db_name $1)

    mkdir -p $AF_DB_DIR/db
    rm -f $DBName

    pushd $2 >/dev/null 2>&1
    find | while read f; do
        local File=$(echo $f | sed "s/^\.//")
        if [ ! -e $File ]; then
            echo $File >> $DBName
        fi
    done
    popd >/dev/null 2>&1

    echo $DBName
}

install_rpm()
{
    local Exports=${1}
    local Name=$(build_name ${2})
    local Version=$(build_version ${2})
    local Image=$(docker_container_image_tag ${2})

    local TmpDir=$(mktemp -d /tmp/af.XXXXXX)
    local SpecFile=$TmpDir/$Name.spec

    cat > $SpecFile <<EOF
Name:		$Name
Version:	$Version
Release:	0
Summary:	Host files from $Image
BuildArch:      noarch

License:	None
URL:		https://github.com/jfilak/af

%description
Files delivered by Docker container : ${2}
The container was created from Docker image : $Image

%prep

%build

%install
rsync -avz $Exports/hostfs/ %{buildroot}

%files
EOF

    pushd $Exports/hostfs
    find -maxdepth 1 -mindepth 1 | sed "s/^\.//" >> $SpecFile
    popd

    cat >> $SpecFile <<EOF

%changelog
* $(date +"%a %b %d %Y") af <af@localhost> - ${Version}-0
- Container import
EOF

    rpmbuild \
        --define "_sourcedir $TmpDir" \
        --define "_rpmdir $TmpDir" \
        --define "_specdir $TmpDir" \
        --define "_builddir $TmpDir" \
        --define "_srcrpmdir $TmpDir" \
        -ba $SpecFile

    rpm -ivh $TmpDir/noarch/$(build_name_rpm $Name $Version).rpm
}

install_files()
{
    local Name=$(build_name ${2})

    rsync -avz ${1}/hostfs/ /
}

install()
{
    local Type=${1}
    case $1 in
        --rpm)
            shift
            ;;
        #--deb
        #--apk
        #--whatever
        --*)
            echo "Unsupported type ${1}"
            exit 1
            ;;
        *)
            Type=""
            ;;
    esac

    local Name=$(build_name ${1})
    local IndexName=$(build_index_name $Name)

    if [ -e $IndexName ]; then
        echo "Container $1 already installed"
        return 1
    fi

    local Exports=$(build_exports_path ${1})
    local DBName=$(create_af_db $Name $Exports/hostfs)

    case $Type in
        --rpm)
            install_rpm $Exports $@ || {
                test -d /mnt/${1} && ( umount /mnt/${1}; rmdir /mnt/${1} )
                rm -f $DBName
                exit 1
            }
            ;;
        #--deb
        #--apk
        #--whatever
       *)
            install_files $Exports $@ || {
                test -d /mnt/${1} && ( umount /mnt/${1}; rmdir /mnt/${1} )
                exit 1
            }
            Type=""
            ;;

    esac

    test -d /mnt/${1} && ( umount /mnt/${1}; rmdir /mnt/${1} )
    mkdir -p $AF_DB_DIR/index
    echo "AF_INSTALL_TYPE=$Type" > $IndexName
}

uninstall()
{
    local Name=$(build_name ${1})
    local Version=$(build_version ${1})
    local DBName=$(build_db_name $Name)
    local IndexName=$(build_index_name $Name)

    if [ ! -e $IndexName ]; then
        echo "Container $1 not installed"
        return 1
    fi

    source $IndexName

    case $AF_INSTALL_TYPE in
        --rpm)
            rpm -evh $(build_name_rpm $Name $Version)
            ;;
        #--deb
        #--apk
        #--whatever
       *)
            cat $DBName | sort -r | while read f; do
                if [ ! -d $f ]; then
                    rm -v $f
                elif [ $(ls -1 $f | wc -l) -eq 0 ]; then
                    rmdir -v $f
                fi
            done
            ;;
    esac

    rm -f $DBName
    rm -f $IndexName
}

query()
{
    find $AF_DB_DIR/db -mindepth 1 | while read f; do
        grep "^$1\$" -q $f && {
            echo $f | sed 's/^.*docker-container-\(.*\)$/\1/'
            exit 0
        }
    done;
}

list()
{
    local Container=false
    if [ "$1" == "--container" ]; then
        Container=true
        shift
    fi

    if $Container; then
        local Exports=$(build_exports_path ${1})
        ( cd $Exports/hostfs;
          find . -mindepth 1 | sed "s/^\.//" )
        test -d /mnt/${1} && ( umount /mnt/${1}; rmdir /mnt/${1} )
    else
        local Name=$(build_name ${1})
        local DBName=$(build_db_name $Name)
        test -e $DBName || {
            echo "Docker container $1 not installed"
            exit 1
        }

        cat $DBName
    fi
}

cmd=$1
shift
case $cmd in
    install)
        install $@
        ;;
    query)
        query $@
        ;;
    list)
        list $@
        ;;
    uninstall)
        uninstall $@
        ;;
    --help|-h|help)
        show_help
        ;;
    *)
        show_usage
        ;;
esac
